---
layout: post
title:  "Graph"
date:   2024-8-16
categories: Feeling
---

# 图论

## Part.1 图是什么？

图由一些点和边构成，某些点或边有一些数值，这些数值被称为**权值**。

图分为有向图和无向图，无向图的边是双向的，就像朋友之间的关系。而有向图的边是单向的，就像父子之间的关系。

于某个关联的边的条数被称为**度**，特别的，在有向图中，度分为入度（指向这个的边的数量）和出度（由这个点延伸出的边的数量）。


## Part.2 怎么存图？

### 无向边

为了避免同时存在有向边和无向边的情况（也好写一些），在存图的过程中，我们一般把一条无向边看做两条相反的有向边。

### 邻接矩阵

邻接矩阵是一种直观的存图方法，邻接矩阵的第$i$行$j$列表示了由点$i$连向点$j$的连边的状态（一般为边权或是是否存在）

例:

![例子](https://cdn.luogu.com.cn/upload/image_hosting/b7j2h0fj.png)

### 邻接表

在稀疏图中，使用邻接矩阵属实是过于浪费空间~~一点也不环保~~。考虑到图中最多使用的一般是遍历出边，邻接表应运而生。

邻接表只存储一个点对应的出边，牺牲了查询边的时间，换来了O($m$)的空间 ~~（泪目）~~

例：

![](https://cdn.luogu.com.cn/upload/image_hosting/0x6zt20b.png)

### 复杂度
![](https://cdn.luogu.com.cn/upload/image_hosting/o0416hke.png)

## Part.3 特殊的图
### 树
树是一种特殊的图，由$n$个点和$n-1$条边构成，且树上所有点之间均有且仅有一条最短路径。

树的最上层被称为根，最下层为叶子节点。节点$a$下方的节点$b$被称为$a$的子节点，而$a$又被称作$b$的父节点，而某节点的上层节点统称为它的祖先节点。

节点$a$距离根节点的距离叫$a$的深度，而深度相同的为兄弟节点

$x$叉树表示此树的每个节点至多只有$x$个子节点。如二叉树上至多两个分叉。

例：

![](https://cdn.luogu.com.cn/upload/image_hosting/j4c9s4rn.png)

1是根节点；2、6、8是叶子节点；4是5的父亲，5是4的儿子，4是7的兄弟。

**虽然树由明确的父子关系，但是树其实是无向图**

## Part.4 相关算法
## 最短路
### 多源最短路（任意两点之间的最短路）
### **Floyd**
Floyd可以在O($n^3$)的时间内求出任意两点之间的最短路，而且代码及其好记，其核心思想为动态规划。

代码实现：
```cpp
for(int k=1;k<=n;k++){//枚举分割点
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			f[i][j]=min(f[i][j],f[i][k]+f[k][k]);//转移
		}
	}
}
```
### 单源最短路（从一个点出发到达其他点的最短路）
### **Dijkstra**
又好写复杂度又低，只要没有负权边，Dijkstra就是永远的神！（至少我这么认为）

一般Dijkstra都会用堆优化的版本，不用的话和其他算法没得比。

演示：

![](https://x.imgs.ovh/x/2023/08/17/64dddfcc056e9.gif)

### **Bellman–Ford**
复杂度略高，不过可以处理负权边，也没多难写，好在有一堆优化。

演示：

![](https://x.imgs.ovh/x/2023/08/17/64de064f504ce.gif)

### 总结

| \ | Floyd | Dijkstra | Bellman–Ford |
| :-----------: | :-----------: | :-----------: | :-----------: |
| 单源？ | 否 | 是 | 是 |
| 负权？ | 是 | 否 | 是 |
| 时间复杂度 | O($n^3$) | O($m~logm$) | $O(nm)$ |

## 拓扑
拓扑序是一种对DAG(有向无环图)的排序方式，对于其中所有边$u\rightarrow v$，$u$要排在$v$的前面。

实现：
每次取出入度为零的点即可。

演示：

![](https://x.imgs.ovh/x/2023/08/17/64de0857668b5.gif)

## 最小生成树
生成树是指将给定的连通图删去某些边后形成一棵树，而图的小生成树为边权和最小的生成树。
### Kruskal
Kruskal算法从边入手，核心思想是贪心，每次取出权值最小的边加入生成树。为了避免两点之间路径重复，使用并查集判断连通性。

>时间复杂度：O($m~logm$)

演示：

![](https://x.imgs.ovh/x/2023/08/17/64de0d78dc3a2.gif)

### Prim
Prim和Kruskal的最大的不同之处在于Prim是从点入手。Kruskal每次加最短边，而Prim是每次加上距离生成树最近的点。由于遍历点的复杂度过高，因此仅适用于稠密图（尽管稠密图也拿不到什么优势）。

>时间复杂度：O($n^2$)

演示：

![](https://x.imgs.ovh/x/2023/08/17/64de0fca23ca3.gif)
